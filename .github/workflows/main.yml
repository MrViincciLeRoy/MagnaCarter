name: Alpaca Market Scanner - Alternative (API Key 2)

on:
  # Manual trigger with input options
  workflow_dispatch:
    inputs:
      mode:
        description: 'Operation mode'
        required: true
        default: 'backtest'
        type: choice
        options:
          - backtest
          - live
          - multi
      symbol:
        description: 'Trading symbol (or "ALL" for market scan)'
        required: false
        default: 'ALL'
        type: string
      paper_trading:
        description: 'Use paper trading'
        required: false
        default: true
        type: boolean
      max_runtime:
        description: 'Maximum runtime in minutes'
        required: false
        default: '55'
        type: string

  # Market scanning every 4 hours during market hours (offset from main.yml)
  # Runs 2 hours after main.yml to avoid conflicts
  # Runs at: 11:30 AM, 3:30 PM EST
  # and 8:00 AM, 12:00 PM, 4:00 PM, 8:00 PM UTC for global markets
  schedule:
    - cron: '0 8,12,16,20 * * 1-5'

  # Trigger on push to develop branch (optional)
  push:
    branches: [ develop ]
    paths: 
      - 'market_scanner.py'
      - 'backtest.py'
      - '**.py'

# Concurrency control to prevent multiple jobs running simultaneously
concurrency:
  group: trading-jobs
  cancel-in-progress: false

jobs:
  market-scanner-alt:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    # Only run during weekdays to avoid unnecessary weekend runs
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'schedule' && github.event.schedule != '0 6 * * 6,0') || github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          # Install essential trading dependencies
          pip install alpaca-py pandas numpy matplotlib yfinance requests
        fi
    
    - name: Set environment variables (API Key 2)
      env:
        ALPACA_API_KEY_2: ${{ secrets.ALPACA_API_KEY2 }}
        ALPACA_SECRET_KEY_2: ${{ secrets.ALPACA_SECRET_KEY2 }}
        ALPACA_BASE_URL_2: ${{ secrets.ALPACA_BASE_URL2 }}
      run: |
        echo "ALPACA_API_KEY=$ALPACA_API_KEY_2" >> $GITHUB_ENV
        echo "ALPACA_SECRET_KEY=$ALPACA_SECRET_KEY_2" >> $GITHUB_ENV
        echo "ALPACA_BASE_URL=$ALPACA_BASE_URL_2" >> $GITHUB_ENV
        echo "MAX_RUNTIME_MINUTES=${{ github.event.inputs.max_runtime || '45' }}" >> $GITHUB_ENV
        echo "API_KEY_SET=2" >> $GITHUB_ENV
    
    - name: Verify API Key Configuration
      run: |
        if [ -z "$ALPACA_API_KEY" ] || [ -z "$ALPACA_SECRET_KEY" ]; then
          echo "ERROR: API Key 2 secrets not configured!"
          echo "Please add ALPACA_API_KEY2, ALPACA_SECRET_KEY2, and ALPACA_BASE_URL2 to GitHub Secrets"
          exit 1
        fi
        echo "âœ“ API Key 2 configuration loaded successfully"
    
    - name: Check market status
      id: market_check
      run: |
        python -c "
        import requests
        import json
        from datetime import datetime, timezone
        
        try:
            # Simple market hours check (US markets)
            now = datetime.now(timezone.utc)
            hour_utc = now.hour
            weekday = now.weekday()  # 0=Monday, 6=Sunday
            
            # US market hours: 9:30 AM - 4:00 PM EST = 14:30 - 21:00 UTC
            is_market_hours = weekday < 5 and 14 <= hour_utc <= 21
            is_extended_hours = weekday < 5 and (13 <= hour_utc <= 22)
            
            print(f'Market hours: {is_market_hours}')
            print(f'Extended hours: {is_extended_hours}')
            print(f'::set-output name=market_open::{is_market_hours}')
            print(f'::set-output name=extended_hours::{is_extended_hours}')
            
        except Exception as e:
            print(f'Market check failed: {e}')
            print('::set-output name=market_open::true')
            print('::set-output name=extended_hours::true')
        "
    
    - name: Run live test (scheduled - API Key 2)
      if: github.event_name == 'schedule'
      timeout-minutes: 105
      run: |
        echo "Starting scheduled live test with API Key 2..."
        python backtest.py \
          --mode live \
          --symbol "BTC/USD" \
          --paper
              
    - name: Run market scan (manual - API Key 2)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'scan'
      timeout-minutes: ${{ fromJSON(github.event.inputs.max_runtime || '45') }}
      run: |
        echo "Starting manual market scan with API Key 2..."
        python market_scanner.py \
          --mode scan \
          --symbol "${{ github.event.inputs.symbol }}" \
          ${{ github.event.inputs.paper_trading == 'true' && '--paper' || '' }} \
          || echo "Scan completed with warnings"
    
    - name: Run backtest (manual - backtest mode - API Key 2)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'backtest'
      timeout-minutes: ${{ fromJSON(github.event.inputs.max_runtime || '45') }}
      run: |
        echo "Running backtest with API Key 2..."
        python main.py \
          --mode backtest \
          --symbol "${{ github.event.inputs.symbol }}" \
          ${{ github.event.inputs.paper_trading == 'true' && '--paper' || '' }}
    
    - name: Run live trading (manual - live mode - API Key 2)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'live'
      timeout-minutes: ${{ fromJSON(github.event.inputs.max_runtime || '45') }}
      run: |
        echo "Running live trading with API Key 2..."
        python main.py \
          --mode live \
          --symbol "${{ github.event.inputs.symbol }}" \
          ${{ github.event.inputs.paper_trading == 'true' && '--paper' || '' }}
    
    - name: Run multi-symbol trading (manual - multi mode - API Key 2)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'multi'
      timeout-minutes: ${{ fromJSON(github.event.inputs.max_runtime || '45') }}
      run: |
        echo "Running multi-symbol trading with API Key 2..."
        python backtest.py \
          --mode multi \
          --symbol "${{ github.event.inputs.symbol }}" \
          ${{ github.event.inputs.paper_trading == 'true' && '--paper' || '' }}
    
    - name: Compress large result files
      if: always()
      run: |
        # Compress large files to save storage
        find . -name "*.csv" -size +10M -exec gzip {} \;
        find . -name "*.log" -size +5M -exec gzip {} \;
        
        # Clean up temporary files
        find . -name "*.tmp" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

    - name: Upload scan results (last 7 days only)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: alt-test-results-${{ github.run_number }}
        path: |
          live_test_results/
          scan_results/
          *.png
          *.csv
          *.csv.gz
          *.log
          *.log.gz
          results/
        retention-days: 7

    - name: Create execution summary (API Key 2)
      if: always()
      run: |
        echo "## ðŸ“Š Alternative Trading Test Execution Report (API Key 2)" >> $GITHUB_STEP_SUMMARY
        echo "- **Mode**: ${{ github.event.inputs.mode || 'scan' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Symbol**: ${{ github.event.inputs.symbol || 'ALL' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Paper Trading**: ${{ github.event.inputs.paper_trading || 'true' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **API Key Set**: 2 (Secondary)" >> $GITHUB_STEP_SUMMARY
        echo "- **Max Runtime**: ${{ github.event.inputs.max_runtime || '45' }} minutes" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Market Open**: ${{ steps.market_check.outputs.market_open }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Execution Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        
        # Show live test results summary if available
        if [ -d "live_test_results" ]; then
          echo "### ðŸ“ˆ Live Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Generated**: $(find live_test_results -type f | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Size**: $(du -sh live_test_results 2>/dev/null | cut -f1 || echo 'N/A')" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "live_test.log" ]; then
          echo "### ðŸ“‹ Latest Live Test Log" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -15 live_test.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        # Resource usage info
        echo "### ðŸ”§ Resource Usage" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow Duration**: ${{ job.status == 'success' && '< 60 minutes' || 'Timeout or error' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Storage Used**: $(du -sh . 2>/dev/null | cut -f1 || echo 'N/A')" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup old artifacts (cost optimization)
      if: always()
      run: |
        echo "Cleaning up to optimize storage usage..."
        echo "Artifact retention set to 7 days to manage storage costs"
